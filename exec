#!/bin/bash
# saner programming env: these switches turn some bugs into errors
set -o errexit -o pipefail -o noclobber -o nounset

# -allow a command to fail with !’s side effect on errexit
# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'I’m sorry, `getopt --test` failed in this environment.'
    exit 1
fi

export $(cat .env | grep 'YII_ENV' | xargs)

OPTIONS=e:c:u:
LONGOPTS=env:,container:,u:

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

declare -A _file _container _user
_file="docker-compose.yml"
_container=""
_user="$(id -u)"

# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -u|--user)
            _user="$2"
            shift 2
            ;;
        -e|--env)
            _file="${files["$2"]}"
            shift 2
            ;;
        -c|--container)
            _container="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done

# handle non-option arguments
#if [[ $# -ne 1 ]]; then
#    echo "$0: A single input file is required."
#    exit 4
#fi

if [ -z "$_container" ]
then
  echo "running: docker-compose -f ${_file} exec -u ${_user} $@"
  docker-compose -f "${_file}" exec -u "${_user}" "$@"
else
  echo "running: docker-compose -f ${_file} exec -u ${_user} ${_container} $@"
  docker-compose -f "${_file}" exec -u "${_user}" "${_container}" "$@"
fi